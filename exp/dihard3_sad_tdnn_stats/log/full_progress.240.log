# nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/239.raw exp/dihard3_sad_tdnn_stats/240.raw 
# Started at Tue Oct 13 17:57:40 EDT 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/239.raw exp/dihard3_sad_tdnn_stats/240.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000201215, max-change=0.75, linear-params-rms=0.0006283, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,2e-05,2e-05,2e-05 2e-05,2e-05,0.003,0.01,0.01 0.02,0.02,0.02,0.02), mean=0.00628, stddev=0.00628], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.009,0.01,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00992, stddev=0.00152], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,2e-06,7e-06,4e-05 0.0001,0.0003,0.003,0.01,0.02 0.02,0.03,0.03,0.03), mean=0.00652, stddev=0.00762], bias-{mean,stddev}=-4.626e-05,0.0011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.007,0.008 0.008,0.009,0.02,0.10,0.12 0.13,0.14,0.17,0.21), mean=0.0513, stddev=0.048], oderiv-count=287179
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000201215, max-change=0.75, linear-params-rms=0.0003729, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.005,0.008,0.02,0.02 0.02,0.02,0.02,0.03), mean=0.0101, stddev=0.00632], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,4e-07,0.002,0.009,0.009 0.01,0.01,0.01,0.01), mean=0.00428, stddev=0.00414], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0006,0.0007 0.0009,0.001,0.004,0.01,0.02 0.03,0.04,0.04,0.05), mean=0.0074, stddev=0.00936], bias-{mean,stddev}=-3.263e-07,1.763e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.32e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.005,0.008,0.02 0.04,0.09,0.25,1.2,2.2 3.0,4.2,5.2,15), mean=0.79, stddev=1.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.10 0.14,0.23,0.40,0.63,0.76 0.86,0.93,0.95,1.3), mean=0.432, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.003,0.009,0.01 0.01,0.02,0.02,0.02), mean=0.00562, stddev=0.00436], oderiv-count=32640
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000201215, max-change=0.75, linear-params-rms=0.0002928, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.005 0.005,0.006,0.009,0.01,0.01 0.01,0.01,0.01,0.02), mean=0.00893, stddev=0.00283], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0005,0.0006 0.0007,0.001,0.002,0.007,0.009 0.01,0.01,0.01,0.01), mean=0.0035, stddev=0.0031], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0009,0.001,0.001 0.001,0.002,0.004,0.01,0.02 0.02,0.03,0.03,0.04), mean=0.00651, stddev=0.00674], bias-{mean,stddev}=1.502e-06,5.034e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.14,0.19 0.25,0.35,0.92,1.7,2.2 2.7,3.2,3.2,4.6), mean=1.09, stddev=0.806], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.18,0.22 0.25,0.29,0.41,0.58,0.66 0.72,0.75,0.80,0.88), mean=0.434, stddev=0.157]
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000201215, max-change=0.75, linear-params-rms=0.0004493, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.01,0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.02), mean=0.0157, stddev=0.00333], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.002,0.002 0.002,0.003,0.006,0.009,0.01 0.01,0.01,0.01,0.01), mean=0.00648, stddev=0.00308], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.005,0.009,0.02,0.03 0.03,0.04,0.05,0.06), mean=0.0127, stddev=0.00992], bias-{mean,stddev}=6.975e-07,3.571e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.16e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.42,-0.30,-0.20,-0.08 0.05,0.17,0.56,1.1,1.6 2.0,2.4,2.9,4.7), mean=0.708, stddev=0.701], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.15,-0.06,-0.0001 0.09,0.17,0.37,0.57,0.69 0.78,0.86,0.94,1.0), mean=0.383, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.004,0.01,0.02,0.02 0.03,0.03,0.03,0.05), mean=0.0128, stddev=0.00894], oderiv-count=4533.33
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000201215, max-change=0.75, linear-params-rms=0.0005584, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0006,0.0008,0.002 0.004,0.008,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0178, stddev=0.00911], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.004,0.005,0.008,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00824, stddev=0.00346], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0003,0.0005,0.001 0.002,0.004,0.01,0.02,0.03 0.04,0.05,0.05,0.07), mean=0.0153, stddev=0.0128], bias-{mean,stddev}=5.278e-06,5.287e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=2.01215e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.0004218, linear-params-row-norms=[ 0.008 0.008 0.0005 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,2e-05,5e-05,6e-05 9e-05,0.0002,0.0004,0.0009,0.001 0.001,0.002,0.002,0.003), mean=0.000571, stddev=0.000456], linear-params-singular-values=[ 0.01 0.0006 2e-07 ], bias-{mean,stddev}=6.209e-09,0.0002128, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3

LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.142968 tdnn2.affine:0.190565 tdnn3.affine:0.149643 tdnn4.affine:0.256769 tdnn5.affine:0.319775 output.affine:0.0116964 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:31.6952 tdnn2.affine:48.7627 tdnn3.affine:30.9623 tdnn4.affine:32.7124 tdnn5.affine:30.8721 output.affine:3.15149 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.00451147 tdnn2.affine:0.00390852 tdnn3.affine:0.00483417 tdnn4.affine:0.00785131 tdnn5.affine:0.0103607 output.affine:0.00371986 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:57:40 EDT 2020, elapsed time 0 seconds
