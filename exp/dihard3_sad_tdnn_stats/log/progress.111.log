# nnet3-info exp/dihard3_sad_tdnn_stats/111.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/110.raw exp/dihard3_sad_tdnn_stats/111.raw 
# Started at Tue Oct 13 17:41:24 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/111.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000606098, max-change=0.75, linear-params-rms=0.1196, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.96,0.99,1.1,2.1,2.3 2.5,3.1,4.1,5.0), mean=1.54, stddev=0.69], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.6 1.6,1.7,1.9,2.1,2.2 2.3,2.4,2.6,3.7), mean=1.89, stddev=0.255], bias-{mean,stddev}=-0.05037,0.6276, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.72e+06, self-repaired-proportion=0.591495, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.005,0.31,0.76 1.0,1.5,1.6,2.0), mean=0.194, stddev=0.373], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.14,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.435, stddev=0.443], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.01,0.08,0.10 0.12,0.13,0.15,0.19), mean=0.0431, stddev=0.0421], oderiv-count=1.46636e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000606098, max-change=0.75, linear-params-rms=0.08239, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.0 1.1,1.1,1.5,3.8,4.5 5.0,5.5,6.1,6.9), mean=2.21, stddev=1.43], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.47 0.48,0.49,0.55,1.8,2.1 2.3,2.5,2.7,3.0), mean=1.12, stddev=0.698], bias-{mean,stddev}=-0.01725,0.9789, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.89e+05, self-repaired-proportion=0.00497698, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.02 0.03,0.05,0.16,1.1,2.1 2.9,3.8,4.6,18), mean=0.724, stddev=1.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.11 0.14,0.19,0.34,0.63,0.77 0.86,0.91,0.93,1.0), mean=0.403, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.007,0.01 0.01,0.02,0.02,0.02), mean=0.00429, stddev=0.00415], oderiv-count=515174
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000606098, max-change=0.75, linear-params-rms=0.04825, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.0 1.1,1.1,1.5,1.8,2.0 2.2,2.4,2.6,2.8), mean=1.5, stddev=0.375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.47,0.48 0.49,0.50,0.53,0.93,1.2 1.4,1.7,1.7,2.0), mean=0.7, stddev=0.321], bias-{mean,stddev}=0.03637,0.9174, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.15e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.08,0.12 0.16,0.25,0.85,1.6,2.3 2.6,3.2,3.5,4.3), mean=1.04, stddev=0.852], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.15,0.16,0.19 0.23,0.27,0.41,0.61,0.71 0.76,0.80,0.82,0.89), mean=0.438, stddev=0.177], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.004,0.005,0.006 0.006,0.007,0.009,0.02), mean=0.00384, stddev=0.00191], oderiv-count=500890
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000606098, max-change=0.75, linear-params-rms=0.04311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.4,1.7,1.9 2.2,2.3,2.6,3.0), mean=1.5, stddev=0.347], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.48,0.63,0.82,0.90 0.99,1.1,1.2,1.7), mean=0.662, stddev=0.189], bias-{mean,stddev}=-0.04691,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.10 0.15,0.22,0.52,1.1,1.5 1.7,2.2,2.6,4.6), mean=0.705, stddev=0.597], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.18,0.23,0.37,0.51,0.60 0.66,0.73,0.76,0.89), mean=0.382, stddev=0.16], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.005,0.007,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.007, stddev=0.00246], oderiv-count=361920
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000606098, max-change=0.75, linear-params-rms=0.04172, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.98 0.99,1.0,1.3,1.9,2.1 2.3,2.4,2.6,3.0), mean=1.42, stddev=0.45], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.48,0.51,0.64,0.77,0.84 0.91,0.99,1.0,1.5), mean=0.651, stddev=0.149], bias-{mean,stddev}=-0.07571,0.8832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.67e+04, self-repaired-proportion=0.0165858, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.02 0.03,0.08,0.35,1.1,1.4 1.7,2.0,2.6,3.7), mean=0.606, stddev=0.618], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.06 0.08,0.16,0.34,0.67,0.77 0.83,0.89,0.92,0.97), mean=0.398, stddev=0.251], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0002,0.0005,0.0009 0.002,0.005,0.01,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0122, stddev=0.0081], oderiv-count=100173
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=6.06098e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.06688, linear-params-row-norms=[ 1.3 1.2 0.48 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.003,0.006,0.009 0.02,0.04,0.09,0.15,0.18 0.21,0.23,0.26,0.31), mean=0.0986, stddev=0.0608], bias-{mean,stddev}=-8.713e-07,0.04018, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=100979
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/110.raw exp/dihard3_sad_tdnn_stats/111.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.451174 tdnn2.affine:0.642051 tdnn3.affine:0.410335 tdnn4.affine:0.585939 tdnn5.affine:0.759696 output.affine:0.0366359 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:28.8258 tdnn2.affine:44.9105 tdnn3.affine:28.6864 tdnn4.affine:29.966 tdnn5.affine:27.7855 output.affine:1.85486 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0156745 tdnn2.affine:0.0143179 tdnn3.affine:0.0143216 tdnn4.affine:0.0195815 tdnn5.affine:0.0273869 output.affine:0.0198436 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:41:24 EDT 2020, elapsed time 0 seconds
