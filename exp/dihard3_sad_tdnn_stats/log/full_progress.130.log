# nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/129.raw exp/dihard3_sad_tdnn_stats/130.raw 
# Started at Tue Oct 13 17:43:44 EDT 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/129.raw exp/dihard3_sad_tdnn_stats/130.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000512817, max-change=0.75, linear-params-rms=0.001756, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,6e-05,6e-05,6e-05 6e-05,6e-05,0.007,0.03,0.04 0.05,0.05,0.06,0.07), mean=0.0171, stddev=0.018], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0278, stddev=0.00397], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,6e-08,7e-08,1e-06 3e-05,0.0005,0.007,0.03,0.05 0.06,0.08,0.09,0.10), mean=0.0173, stddev=0.022], bias-{mean,stddev}=-0.0001542,0.002867, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.2e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.001,-0.0004,-3e-05,-2e-07 0,0,0.004,0.29,0.73 1.0,1.5,1.6,2.0), mean=0.191, stddev=0.369], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,-0.02,-0.002,-1e-05 0,0,0.15,1.0,1.0 1.0,1.0,1.0,1.1), mean=0.435, stddev=0.445]
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000512817, max-change=0.75, linear-params-rms=0.001072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.008 0.009,0.01,0.02,0.05,0.06 0.07,0.07,0.08,0.09), mean=0.0275, stddev=0.0205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.005,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0121, stddev=0.0121], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.002,0.003,0.008,0.03,0.05 0.08,0.11,0.13,0.17), mean=0.0196, stddev=0.0281], bias-{mean,stddev}=6.609e-06,5.663e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.02e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.1,-4.7,-2.3,-1.8 -1.1,-0.36,0.09,1.1,3.1 4.6,6.8,9.0,11), mean=0.589, stddev=2.15], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.3,-2.7,-1.4,-1.1 -0.60,-0.21,0.36,1.2,1.7 2.0,2.7,4.1,4.7), mean=0.455, stddev=1.09], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.005,0.009 0.01,0.01,0.02,0.02), mean=0.00319, stddev=0.00407], oderiv-count=8755.2
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000512817, max-change=0.75, linear-params-rms=0.0007171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.008,0.009 0.01,0.01,0.02,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0215, stddev=0.00794], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.001 0.001,0.002,0.004,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.00825, stddev=0.00794], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.003,0.008,0.02,0.04 0.05,0.07,0.08,0.10), mean=0.0148, stddev=0.0176], bias-{mean,stddev}=3.596e-06,0.0001169, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000512817, max-change=0.75, linear-params-rms=0.0009626, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.04,0.05 0.05,0.05,0.05,0.06), mean=0.033, stddev=0.00976], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.004 0.005,0.006,0.01,0.02,0.02 0.03,0.03,0.03,0.03), mean=0.0136, stddev=0.00709], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.006 0.007,0.009,0.02,0.04,0.06 0.08,0.09,0.10,0.12), mean=0.0261, stddev=0.0225], bias-{mean,stddev}=-3.251e-06,9.229e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.36e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.04,0.05,0.10 0.15,0.25,0.56,1.1,1.4 1.9,2.2,2.5,4.5), mean=0.705, stddev=0.592], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.10,0.14 0.18,0.24,0.37,0.51,0.61 0.68,0.75,0.78,0.98), mean=0.383, stddev=0.166], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.002,0.003 0.003,0.004,0.005,0.008,0.009 0.01,0.01,0.01,0.02), mean=0.00587, stddev=0.00248], oderiv-count=37120
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000512817, max-change=0.75, linear-params-rms=0.001198, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.002,0.003 0.006,0.01,0.04,0.06,0.06 0.07,0.07,0.08,0.08), mean=0.037, stddev=0.0217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.006 0.007,0.01,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0175, stddev=0.00785], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0009,0.001 0.003,0.007,0.02,0.05,0.07 0.09,0.11,0.12,0.14), mean=0.0316, stddev=0.0291], bias-{mean,stddev}=5.231e-06,9.262e-05, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=4.12e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.39,-0.18,-0.04,-0.006 0.02,0.06,0.48,1.0,1.4 1.9,2.3,2.5,3.0), mean=0.607, stddev=0.629], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,-0.05,-0.01,0.02 0.06,0.12,0.41,0.69,0.79 0.86,0.91,0.95,0.96), mean=0.415, stddev=0.274]
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=5.12817e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.001179, linear-params-row-norms=[ 0.02 0.02 0.0009 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,2e-05,6e-05,0.0001 0.0002,0.0005,0.001,0.002,0.003 0.004,0.006,0.006,0.008), mean=0.00152, stddev=0.00136], linear-params-singular-values=[ 0.03 0.001 2e-07 ], bias-{mean,stddev}=7.761e-09,0.0003971, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3

LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.399301 tdnn2.affine:0.547628 tdnn3.affine:0.366445 tdnn4.affine:0.550172 tdnn5.affine:0.686319 output.affine:0.0326692 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:29.642 tdnn2.affine:46.1091 tdnn3.affine:29.3043 tdnn4.affine:30.6835 tdnn5.affine:28.6185 output.affine:2.07789 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.013487 tdnn2.affine:0.0118903 tdnn3.affine:0.0125158 tdnn4.affine:0.0179487 tdnn5.affine:0.0240135 output.affine:0.0158163 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:43:44 EDT 2020, elapsed time 0 seconds
