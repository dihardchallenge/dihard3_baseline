# nnet3-info exp/dihard3_sad_tdnn_stats/120.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/119.raw exp/dihard3_sad_tdnn_stats/120.raw 
# Started at Tue Oct 13 17:42:30 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/120.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00055751, max-change=0.75, linear-params-rms=0.122, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.96,0.99,1.1,2.2,2.3 2.5,3.2,4.2,5.0), mean=1.57, stddev=0.714], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.6,1.6 1.7,1.7,1.9,2.1,2.2 2.3,2.4,2.6,3.7), mean=1.93, stddev=0.257], bias-{mean,stddev}=-0.04823,0.6124, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.54e+06, self-repaired-proportion=0.580669, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.005,0.29,0.73 1.0,1.5,1.6,2.0), mean=0.189, stddev=0.364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.15,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.435, stddev=0.441], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.01,0.09,0.10 0.12,0.13,0.16,0.20), mean=0.0445, stddev=0.0432], oderiv-count=1.52635e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00055751, max-change=0.75, linear-params-rms=0.08365, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.0 1.1,1.1,1.5,3.8,4.5 5.1,5.7,6.1,7.0), mean=2.25, stddev=1.46], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.47 0.48,0.49,0.55,1.9,2.1 2.3,2.6,2.7,3.0), mean=1.13, stddev=0.712], bias-{mean,stddev}=-0.01729,0.9789, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.9e+05, self-repaired-proportion=0.0049659, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.02 0.03,0.04,0.17,1.1,2.1 2.9,3.9,4.4,17), mean=0.724, stddev=1.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.11 0.14,0.20,0.35,0.60,0.77 0.87,0.91,0.93,1.0), mean=0.399, stddev=0.231], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.007,0.01 0.01,0.02,0.02,0.03), mean=0.00454, stddev=0.00434], oderiv-count=526694
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00055751, max-change=0.75, linear-params-rms=0.04896, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.0 1.1,1.1,1.5,1.8,2.0 2.3,2.4,2.6,2.8), mean=1.52, stddev=0.382], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.47,0.48 0.49,0.50,0.54,0.95,1.2 1.4,1.7,1.8,2.0), mean=0.709, stddev=0.33], bias-{mean,stddev}=0.03636,0.9173, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.09,0.12 0.18,0.26,0.85,1.7,2.3 2.7,3.2,3.6,4.6), mean=1.06, stddev=0.864], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.16,0.20 0.23,0.27,0.41,0.61,0.71 0.76,0.80,0.82,0.90), mean=0.437, stddev=0.176], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.004,0.005,0.006 0.007,0.008,0.009,0.02), mean=0.00398, stddev=0.00191], oderiv-count=531763
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00055751, max-change=0.75, linear-params-rms=0.04387, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.5,1.8,2.0 2.2,2.3,2.7,3.0), mean=1.53, stddev=0.354], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.48,0.64,0.83,0.92 1.0,1.2,1.2,1.8), mean=0.673, stddev=0.194], bias-{mean,stddev}=-0.04688,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.09 0.16,0.23,0.51,1.1,1.4 1.7,2.1,2.5,4.5), mean=0.695, stddev=0.584], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.18,0.23,0.37,0.50,0.59 0.65,0.71,0.76,0.89), mean=0.378, stddev=0.157], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.005,0.005,0.007,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00761, stddev=0.00256], oderiv-count=353600
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00055751, max-change=0.75, linear-params-rms=0.04258, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.98 0.99,1.0,1.3,1.9,2.1 2.3,2.4,2.7,3.0), mean=1.45, stddev=0.465], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.46 0.48,0.52,0.65,0.79,0.86 0.92,1.0,1.1,1.5), mean=0.664, stddev=0.153], bias-{mean,stddev}=-0.07576,0.8832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7e+04, self-repaired-proportion=0.0144989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.02 0.03,0.09,0.36,1.1,1.4 1.6,2.0,2.5,3.6), mean=0.592, stddev=0.593], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.06 0.09,0.17,0.35,0.65,0.75 0.81,0.87,0.91,0.96), mean=0.395, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0002,0.0004,0.0008 0.002,0.005,0.01,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.013, stddev=0.0084], oderiv-count=103398
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=5.5751e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.07065, linear-params-row-norms=[ 1.4 1.3 0.49 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.006,0.01 0.02,0.05,0.10,0.16,0.18 0.22,0.24,0.26,0.31), mean=0.105, stddev=0.0628], bias-{mean,stddev}=-9.569e-07,0.04275, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=106086
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/119.raw exp/dihard3_sad_tdnn_stats/120.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.42996 tdnn2.affine:0.594623 tdnn3.affine:0.386186 tdnn4.affine:0.575379 tdnn5.affine:0.726265 output.affine:0.0352419 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:29.2376 tdnn2.affine:45.5152 tdnn3.affine:28.9967 tdnn4.affine:30.3242 tdnn5.affine:28.2093 output.affine:1.95943 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0147274 tdnn2.affine:0.013078 tdnn3.affine:0.0133343 tdnn4.affine:0.0189973 tdnn5.affine:0.0257866 output.affine:0.0181094 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:42:30 EDT 2020, elapsed time 0 seconds
