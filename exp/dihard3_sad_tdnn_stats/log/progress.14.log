# nnet3-info exp/dihard3_sad_tdnn_stats/14.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/13.raw exp/dihard3_sad_tdnn_stats/14.raw 
# Started at Tue Oct 13 17:29:47 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/14.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00108955, max-change=0.75, linear-params-rms=0.07475, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.90,0.92 0.94,0.98,1.0,1.1,1.2 1.2,1.3,1.3,1.5), mean=1.05, stddev=0.0992], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.2,1.3 1.3,1.3,1.4,2.0), mean=1.19, stddev=0.0938], bias-{mean,stddev}=-0.08157,0.9257, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.6e+06, self-repaired-proportion=0.91067, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0004,0.69,1.2 1.5,2.1,2.1,2.6), mean=0.329, stddev=0.536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.451, stddev=0.486], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.008,0.009 0.01,0.01,0.02,0.08,0.10 0.11,0.12,0.13,0.14), mean=0.0425, stddev=0.0375], oderiv-count=1.51379e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00108955, max-change=0.75, linear-params-rms=0.04262, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.97 0.98,1.0,1.0,1.6,2.0 2.3,2.5,2.6,3.5), mean=1.29, stddev=0.45], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.52,0.84,0.96 1.0,1.1,1.2,1.5), mean=0.65, stddev=0.202], bias-{mean,stddev}=-0.01739,0.9793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.09e+05, self-repaired-proportion=0.122837, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.005,0.009,0.04,0.47,1.0 1.4,1.9,3.0,11), mean=0.341, stddev=0.881], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.10,0.21,0.62,0.88 0.93,0.96,1.0,1.0), mean=0.342, stddev=0.298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.004,0.005,0.006,0.02,0.03 0.03,0.04,0.05,0.06), mean=0.0112, stddev=0.0102], oderiv-count=546048
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00108955, max-change=0.75, linear-params-rms=0.03323, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.96,0.97,0.97 0.98,0.99,1.0,1.1,1.2 1.2,1.3,1.5,1.7), mean=1.06, stddev=0.0981], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.47,0.48,0.50,0.55,0.61 0.66,0.77,0.83,1.0), mean=0.526, stddev=0.0734], bias-{mean,stddev}=0.03636,0.9193, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.55e+05, self-repaired-proportion=0.0619423, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.01 0.02,0.04,0.20,0.93,1.3 1.6,1.9,2.1,2.9), mean=0.489, stddev=0.566], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.09 0.11,0.16,0.40,0.79,0.89 0.92,0.93,0.94,0.97), mean=0.458, stddev=0.291], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.004,0.005,0.009,0.01 0.01,0.01,0.02,0.03), mean=0.00669, stddev=0.00335], oderiv-count=523008
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00108955, max-change=0.75, linear-params-rms=0.02961, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.97,0.97,0.97 0.98,0.99,1.0,1.1,1.1 1.2,1.3,1.5,1.6), mean=1.06, stddev=0.0938], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.42,0.44,0.46,0.50,0.53 0.56,0.60,0.63,0.79), mean=0.47, stddev=0.0473], bias-{mean,stddev}=-0.04725,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.36e+05, self-repaired-proportion=0.0248197, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.02,0.04,0.25,0.80,1.1 1.4,1.7,1.8,2.1), mean=0.45, stddev=0.477], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.09,0.14,0.34,0.62,0.76 0.87,0.92,0.94,0.95), mean=0.391, stddev=0.252], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.005,0.006,0.007,0.01,0.01 0.02,0.02,0.03,0.04), mean=0.00859, stddev=0.00432], oderiv-count=328000
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00108955, max-change=0.75, linear-params-rms=0.0286, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.94,0.95,0.96 0.96,0.97,1.0,1.1,1.1 1.2,1.3,1.3,1.5), mean=1.02, stddev=0.0754], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.42,0.43,0.45,0.48,0.49 0.51,0.54,0.56,0.83), mean=0.456, stddev=0.0324], bias-{mean,stddev}=-0.07551,0.8834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.3e+04, self-repaired-proportion=0.213224, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-07,5e-05,0.003 0.01,0.03,0.18,0.90,1.3 1.8,1.9,2.1,2.9), mean=0.465, stddev=0.574], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-06,0.0005,0.01 0.06,0.10,0.33,0.79,0.97 1.0,1.0,1.0,1.0), mean=0.427, stddev=0.328], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-10,2e-06,2e-05,0.0002 0.0005,0.001,0.005,0.02,0.02 0.03,0.04,0.05,0.05), mean=0.00946, stddev=0.0103], oderiv-count=106176
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000108955, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.03042, linear-params-row-norms=[ 0.57 0.53 0.33 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-10,1e-06,2e-05,0.0006 0.001,0.004,0.03,0.07,0.09 0.11,0.13,0.15,0.17), mean=0.0373, stddev=0.0372], bias-{mean,stddev}=6.395e-08,0.01715, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=93408
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/13.raw exp/dihard3_sad_tdnn_stats/14.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.541611 tdnn2.affine:1.45204 tdnn3.affine:0.737971 tdnn4.affine:0.721914 tdnn5.affine:0.733292 output.affine:0.0390124 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.4756 tdnn2.affine:26.8132 tdnn3.affine:22.4544 tdnn4.affine:24.0356 tdnn5.affine:21.6686 output.affine:0.843533 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0241422 tdnn2.affine:0.0550374 tdnn3.affine:0.032976 tdnn4.affine:0.0301097 tdnn5.affine:0.0339029 output.affine:0.0472439 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Oct 13 17:29:48 EDT 2020, elapsed time 1 seconds
