# nnet3-info exp/dihard3_sad_tdnn_stats/55.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/54.raw exp/dihard3_sad_tdnn_stats/55.raw 
# Started at Tue Oct 13 17:34:32 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/55.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000803503, max-change=0.75, linear-params-rms=0.09715, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.6,1.7 1.9,2.0,3.2,3.9), mean=1.3, stddev=0.434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.4,1.5,1.7,1.8 1.9,1.9,2.1,3.2), mean=1.54, stddev=0.213], bias-{mean,stddev}=-0.06867,0.774, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.79e+06, self-repaired-proportion=0.742271, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.51,0.98 1.3,1.8,1.8,2.3), mean=0.255, stddev=0.453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.10,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.442, stddev=0.466], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.006,0.009,0.07,0.09 0.10,0.11,0.12,0.15), mean=0.0363, stddev=0.0354], oderiv-count=1.51902e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000803503, max-change=0.75, linear-params-rms=0.06747, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,1.0,1.0 1.0,1.0,1.2,2.9,3.7 4.0,4.5,4.8,6.2), mean=1.85, stddev=1.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,1.5,1.7 1.8,2.1,2.2,2.4), mean=0.942, stddev=0.523], bias-{mean,stddev}=-0.01727,0.9791, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.48e+05, self-repaired-proportion=0.0159077, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.005,0.007 0.01,0.02,0.09,1.0,1.9 2.5,3.0,3.3,19), mean=0.6, stddev=1.46], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.09 0.11,0.14,0.28,0.71,0.84 0.91,0.93,0.94,1.0), mean=0.389, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.007,0.01 0.01,0.02,0.02,0.03), mean=0.00444, stddev=0.00467], oderiv-count=506304
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000803503, max-change=0.75, linear-params-rms=0.0411, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.97,0.99,1.0 1.0,1.0,1.2,1.5,1.6 1.8,2.0,2.1,2.5), mean=1.29, stddev=0.27], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.47 0.48,0.49,0.51,0.74,0.92 1.1,1.4,1.4,1.6), mean=0.618, stddev=0.222], bias-{mean,stddev}=0.03639,0.9182, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.86e+05, self-repaired-proportion=0.00042735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.03,0.04 0.08,0.13,0.60,1.4,2.0 2.4,2.8,3.2,4.2), mean=0.834, stddev=0.796], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.13 0.18,0.23,0.42,0.68,0.78 0.85,0.89,0.91,0.91), mean=0.446, stddev=0.222], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.007,0.008,0.009,0.02), mean=0.00367, stddev=0.00205], oderiv-count=487872
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000803503, max-change=0.75, linear-params-rms=0.03605, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,1.0,1.0 1.0,1.1,1.2,1.4,1.6 1.8,1.9,2.1,2.4), mean=1.27, stddev=0.246], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.53,0.66,0.73 0.78,0.87,0.97,1.3), mean=0.561, stddev=0.128], bias-{mean,stddev}=-0.04707,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.14e+05, self-repaired-proportion=0.00200535, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.06 0.09,0.14,0.45,1.1,1.4 1.7,2.0,2.5,3.9), mean=0.64, stddev=0.591], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.10,0.12 0.15,0.22,0.37,0.55,0.64 0.72,0.79,0.83,0.91), mean=0.388, stddev=0.186], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.02), mean=0.00573, stddev=0.00262], oderiv-count=358000
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000803503, max-change=0.75, linear-params-rms=0.03429, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.95,0.96 0.98,0.99,1.1,1.4,1.6 1.7,1.9,2.0,2.4), mean=1.2, stddev=0.276], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.42,0.43 0.44,0.46,0.52,0.61,0.66 0.72,0.79,0.83,1.2), mean=0.54, stddev=0.0955], bias-{mean,stddev}=-0.07561,0.8832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.44e+04, self-repaired-proportion=0.0641741, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.009,0.01,0.02 0.02,0.05,0.30,1.2,1.6 1.9,2.5,2.7,3.3), mean=0.624, stddev=0.698], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.03,0.05,0.06 0.07,0.12,0.38,0.74,0.89 0.93,0.99,1.0,1.0), mean=0.428, stddev=0.296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,9e-05,0.0002,0.0004 0.001,0.002,0.007,0.01,0.02 0.02,0.03,0.03,0.04), mean=0.00878, stddev=0.00772], oderiv-count=105616
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=8.03503e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.04558, linear-params-row-norms=[ 0.87 0.81 0.42 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0004,0.001,0.003 0.006,0.02,0.05,0.10,0.13 0.16,0.18,0.20,0.26), mean=0.0612, stddev=0.0499], bias-{mean,stddev}=-2.266e-07,0.02614, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=103824
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/54.raw exp/dihard3_sad_tdnn_stats/55.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.579242 tdnn2.affine:0.990499 tdnn3.affine:0.593251 tdnn4.affine:0.72782 tdnn5.affine:0.931881 output.affine:0.0603091 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.2055 tdnn2.affine:37.8557 tdnn3.affine:25.6202 tdnn4.affine:26.7511 tdnn5.affine:24.2223 output.affine:1.26394 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0230258 tdnn2.affine:0.0262722 tdnn3.affine:0.023219 tdnn4.affine:0.027275 tdnn5.affine:0.0385861 output.affine:0.0480543 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:34:32 EDT 2020, elapsed time 0 seconds
