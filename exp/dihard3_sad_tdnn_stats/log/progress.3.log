# nnet3-info exp/dihard3_sad_tdnn_stats/3.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/2.raw exp/dihard3_sad_tdnn_stats/3.raw 
# Started at Tue Oct 13 17:28:31 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/3.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00118231, max-change=0.75, linear-params-rms=0.0707, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.89,0.91 0.93,0.96,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.999, stddev=0.0509], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.13, stddev=0.0488], bias-{mean,stddev}=-0.08199,0.9637, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.7e+06, self-repaired-proportion=0.960769, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,3e-05,0.73,1.3 1.5,2.1,2.2,2.7), mean=0.349, stddev=0.557], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.451, stddev=0.489], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.009,0.01,0.02,0.04,0.06 0.07,0.08,0.09,0.14), mean=0.0258, stddev=0.0218], oderiv-count=1.58181e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00118231, max-change=0.75, linear-params-rms=0.0327, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.95,0.96 0.97,0.98,1.0,1.1,1.1 1.2,1.3,1.4,1.7), mean=1.04, stddev=0.0875], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.47,0.48,0.51,0.55,0.58 0.61,0.65,0.68,0.77), mean=0.52, stddev=0.0475], bias-{mean,stddev}=-0.01716,0.9795, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.22e+05, self-repaired-proportion=0.340242, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.002,0.004 0.005,0.009,0.04,0.60,1.2 1.6,2.1,2.8,4.8), mean=0.358, stddev=0.659], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.05,0.05,0.06 0.07,0.09,0.20,0.88,0.99 1.0,1.0,1.0,1.0), mean=0.388, stddev=0.353], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.007 0.007,0.008,0.01,0.02,0.03 0.03,0.04,0.05,0.08), mean=0.0145, stddev=0.00991], oderiv-count=536256
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00118231, max-change=0.75, linear-params-rms=0.03131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.96 0.97,0.97,1.0,1.0,1.0 1.1,1.1,1.1,1.3), mean=1, stddev=0.0379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.46 0.47,0.48,0.50,0.52,0.53 0.55,0.57,0.59,0.69), mean=0.499, stddev=0.0282], bias-{mean,stddev}=0.0365,0.9202, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.12e+05, self-repaired-proportion=0.304566, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-05,0.0005 0.005,0.02,0.13,0.84,1.1 1.5,1.8,2.1,2.4), mean=0.392, stddev=0.512], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.0006,0.006 0.05,0.11,0.34,0.86,0.95 0.98,0.99,1.0,1.0), mean=0.437, stddev=0.345], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.006,0.008,0.01,0.01 0.02,0.02,0.02,0.03), mean=0.00893, stddev=0.00357], oderiv-count=524160
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00118231, max-change=0.75, linear-params-rms=0.02814, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.94,0.96,0.96 0.97,0.98,1.0,1.0,1.0 1.1,1.1,1.2,1.3), mean=1.01, stddev=0.0398], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.41 0.42,0.43,0.45,0.47,0.48 0.49,0.50,0.52,0.60), mean=0.449, stddev=0.0245], bias-{mean,stddev}=-0.04724,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.39e+05, self-repaired-proportion=0.246836, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-09,1e-05,0.0008 0.007,0.02,0.18,0.75,1.1 1.3,1.6,1.9,2.2), mean=0.375, stddev=0.461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-07,0.0002,0.008 0.04,0.08,0.31,0.74,0.91 0.97,0.99,0.99,1.0), mean=0.393, stddev=0.319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.006 0.007,0.008,0.009,0.01,0.02 0.02,0.02,0.03,0.06), mean=0.0107, stddev=0.00571], oderiv-count=382000
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00118231, max-change=0.75, linear-params-rms=0.02784, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.96 0.97,0.97,0.99,1.0,1.0 1.0,1.1,1.1,1.1), mean=0.996, stddev=0.03], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.41 0.42,0.43,0.44,0.46,0.47 0.48,0.49,0.50,0.56), mean=0.445, stddev=0.0211], bias-{mean,stddev}=-0.07529,0.8837, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=8.24e+04, self-repaired-proportion=0.312869, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.002,0.01,0.15,0.69,1.1 1.3,1.6,1.8,2.6), mean=0.371, stddev=0.467], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0002 0.01,0.07,0.34,0.78,0.98 1.0,1.0,1.0,1.0), mean=0.417, stddev=0.343], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-11,2e-10,4e-10,1e-05 0.0002,0.0007,0.006,0.02,0.03 0.03,0.04,0.05,0.07), mean=0.0102, stddev=0.0118], oderiv-count=94080
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000118231, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.02237, linear-params-row-norms=[ 0.40 0.39 0.26 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-10,6e-10,8e-10,1e-05 0.0002,0.001,0.02,0.05,0.07 0.08,0.09,0.11,0.15), mean=0.0263, stddev=0.0284], bias-{mean,stddev}=2.359e-08,0.01341, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=98672
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/2.raw exp/dihard3_sad_tdnn_stats/3.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.559736 tdnn2.affine:1.81312 tdnn3.affine:1.07563 tdnn4.affine:0.96876 tdnn5.affine:0.866133 output.affine:0.0697191 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.2134 tdnn2.affine:22.8882 tdnn3.affine:21.7303 tdnn4.affine:23.4553 tdnn5.affine:21.3453 output.affine:0.620257 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0252181 tdnn2.affine:0.0800537 tdnn3.affine:0.0495897 tdnn4.affine:0.0413903 tdnn5.affine:0.0406142 output.affine:0.120499 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:28:31 EDT 2020, elapsed time 0 seconds
