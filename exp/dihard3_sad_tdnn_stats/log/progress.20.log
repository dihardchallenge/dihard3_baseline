# nnet3-info exp/dihard3_sad_tdnn_stats/20.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/19.raw exp/dihard3_sad_tdnn_stats/20.raw 
# Started at Tue Oct 13 17:30:29 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/20.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00104206, max-change=0.75, linear-params-rms=0.07771, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.0,1.2,1.3 1.3,1.4,1.5,1.9), mean=1.09, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.3,1.4 1.4,1.4,1.5,2.2), mean=1.24, stddev=0.118], bias-{mean,stddev}=-0.08087,0.9031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.87e+06, self-repaired-proportion=0.900685, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0009,0.66,1.2 1.4,2.0,2.0,2.6), mean=0.317, stddev=0.524], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.449, stddev=0.484], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.007 0.007,0.009,0.01,0.08,0.09 0.11,0.12,0.13,0.13), mean=0.04, stddev=0.0368], oderiv-count=1.52077e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00104206, max-change=0.75, linear-params-rms=0.04765, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.1,1.9,2.3 2.6,3.0,3.1,4.3), mean=1.4, stddev=0.608], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,0.97,1.1 1.2,1.4,1.4,1.7), mean=0.71, stddev=0.273], bias-{mean,stddev}=-0.01732,0.9793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.5e+05, self-repaired-proportion=0.0714236, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.005 0.007,0.009,0.05,0.64,1.2 1.8,2.3,3.5,14), mean=0.406, stddev=1.09], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.11,0.24,0.71,0.89 0.93,0.95,0.98,1.0), mean=0.362, stddev=0.295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.01,0.02 0.02,0.03,0.04,0.05), mean=0.00821, stddev=0.00799], oderiv-count=485568
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00104206, max-change=0.75, linear-params-rms=0.0344, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.97,0.97,0.98 0.98,1.0,1.1,1.2,1.2 1.3,1.4,1.6,1.9), mean=1.09, stddev=0.13], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.47,0.48,0.50,0.58,0.66 0.75,0.86,0.95,1.1), mean=0.54, stddev=0.0998], bias-{mean,stddev}=0.0363,0.9191, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=4.64e+05, self-repaired-proportion=0.020777, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.03,0.05,0.24,1.0,1.5 1.9,2.1,2.3,3.4), mean=0.553, stddev=0.633], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.10,0.11 0.13,0.17,0.39,0.77,0.88 0.93,0.94,0.95,0.95), mean=0.453, stddev=0.28], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.003,0.004,0.007,0.009 0.01,0.01,0.01,0.03), mean=0.00559, stddev=0.00294], oderiv-count=517824
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00104206, max-change=0.75, linear-params-rms=0.03052, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.97,0.98 0.99,1.0,1.1,1.1,1.2 1.3,1.4,1.6,1.7), mean=1.09, stddev=0.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.41,0.42 0.43,0.44,0.47,0.53,0.56 0.59,0.65,0.70,0.90), mean=0.483, stddev=0.0608], bias-{mean,stddev}=-0.0473,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.2e+05, self-repaired-proportion=0.00811226, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.05,0.28,0.88,1.2 1.6,1.9,2.0,2.4), mean=0.493, stddev=0.518], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.10,0.16,0.35,0.60,0.75 0.84,0.90,0.91,0.94), mean=0.389, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.005,0.006,0.009,0.01 0.01,0.02,0.02,0.03), mean=0.00752, stddev=0.0038], oderiv-count=337600
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00104206, max-change=0.75, linear-params-rms=0.02925, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.94,0.95,0.96 0.97,0.98,1.0,1.1,1.2 1.3,1.4,1.4,1.7), mean=1.04, stddev=0.105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.46,0.49,0.51 0.54,0.58,0.59,0.92), mean=0.466, stddev=0.0414], bias-{mean,stddev}=-0.07554,0.8833, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.45e+04, self-repaired-proportion=0.193059, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-06,0.0007,0.005 0.01,0.03,0.20,0.97,1.4 1.9,2.1,2.4,3.2), mean=0.507, stddev=0.622], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-05,0.004,0.03 0.06,0.11,0.33,0.76,0.96 1.0,1.0,1.0,1.0), mean=0.428, stddev=0.323], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-10,1e-05,5e-05,0.0003 0.0006,0.001,0.005,0.02,0.02 0.03,0.03,0.04,0.05), mean=0.00909, stddev=0.00963], oderiv-count=98560
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000104206, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.03317, linear-params-row-norms=[ 0.63 0.58 0.35 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-10,2e-05,0.0001,0.0006 0.002,0.006,0.03,0.08,0.10 0.12,0.14,0.16,0.20), mean=0.041, stddev=0.0402], bias-{mean,stddev}=9.996e-08,0.01864, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=90048
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/19.raw exp/dihard3_sad_tdnn_stats/20.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.5329 tdnn2.affine:1.19963 tdnn3.affine:0.673942 tdnn4.affine:0.715554 tdnn5.affine:0.804887 output.affine:0.0480969 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.7517 tdnn2.affine:28.9409 tdnn3.affine:22.9066 tdnn4.affine:24.401 tdnn5.affine:21.9513 output.affine:0.919686 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0234731 tdnn2.affine:0.0419127 tdnn3.affine:0.0295202 tdnn4.affine:0.029399 tdnn5.affine:0.0367582 output.affine:0.0528258 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Oct 13 17:30:30 EDT 2020, elapsed time 1 seconds
