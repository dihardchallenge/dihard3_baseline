# nnet3-info exp/dihard3_sad_tdnn_stats/17.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/16.raw exp/dihard3_sad_tdnn_stats/17.raw 
# Started at Tue Oct 13 17:30:08 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/17.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00106554, max-change=0.75, linear-params-rms=0.07614, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.94,0.98,1.0,1.2,1.2 1.3,1.3,1.4,1.7), mean=1.07, stddev=0.122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.1,1.2,1.3,1.3 1.3,1.4,1.5,2.1), mean=1.21, stddev=0.106], bias-{mean,stddev}=-0.08122,0.9147, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.68e+06, self-repaired-proportion=0.907784, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0008,0.68,1.2 1.5,2.0,2.1,2.6), mean=0.323, stddev=0.53], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.45, stddev=0.485], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.009,0.01,0.01,0.08,0.10 0.11,0.12,0.13,0.14), mean=0.042, stddev=0.0378], oderiv-count=1.57832e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00106554, max-change=0.75, linear-params-rms=0.04531, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.97,0.98 0.99,1.0,1.1,1.8,2.2 2.4,2.7,2.9,4.1), mean=1.35, stddev=0.538], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,0.91,1.0 1.1,1.3,1.3,1.6), mean=0.682, stddev=0.241], bias-{mean,stddev}=-0.01735,0.9793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.93e+05, self-repaired-proportion=0.0803124, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.006,0.01,0.05,0.53,1.1 1.6,2.1,3.3,13), mean=0.378, stddev=0.986], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.09,0.11,0.24,0.67,0.90 0.93,0.95,0.98,1.0), mean=0.361, stddev=0.293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.004,0.004,0.005,0.01,0.02 0.03,0.04,0.04,0.06), mean=0.00972, stddev=0.00922], oderiv-count=478656
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00106554, max-change=0.75, linear-params-rms=0.03378, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.97,0.97,0.98 0.98,0.99,1.0,1.1,1.2 1.3,1.3,1.5,1.8), mean=1.08, stddev=0.113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.47,0.48,0.50,0.56,0.63 0.70,0.82,0.89,1.1), mean=0.532, stddev=0.0862], bias-{mean,stddev}=0.03634,0.9192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.25e+05, self-repaired-proportion=0.0264851, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.02 0.03,0.05,0.23,1.0,1.4 1.7,1.9,2.2,3.1), mean=0.522, stddev=0.589], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.13,0.17,0.39,0.77,0.88 0.92,0.94,0.95,0.95), mean=0.459, stddev=0.279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.005,0.008,0.01 0.01,0.01,0.02,0.03), mean=0.00617, stddev=0.00319], oderiv-count=525312
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00106554, max-change=0.75, linear-params-rms=0.03004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.97,0.98 0.99,1.0,1.0,1.1,1.2 1.2,1.3,1.6,1.6), mean=1.07, stddev=0.106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.42,0.44,0.46,0.51,0.54 0.57,0.62,0.66,0.84), mean=0.477, stddev=0.0538], bias-{mean,stddev}=-0.04728,1.068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.54e+05, self-repaired-proportion=0.0199898, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.05,0.26,0.85,1.2 1.5,1.9,2.0,2.3), mean=0.479, stddev=0.508], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.09,0.13,0.36,0.63,0.77 0.85,0.91,0.93,0.94), mean=0.39, stddev=0.248], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.006,0.007,0.009,0.01 0.01,0.02,0.02,0.04), mean=0.00789, stddev=0.00398], oderiv-count=338800
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00106554, max-change=0.75, linear-params-rms=0.0289, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.94,0.95,0.96 0.97,0.98,1.0,1.1,1.1 1.2,1.3,1.3,1.6), mean=1.03, stddev=0.0898], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.43,0.46,0.48,0.50 0.52,0.55,0.57,0.88), mean=0.461, stddev=0.0367], bias-{mean,stddev}=-0.07553,0.8834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.53e+04, self-repaired-proportion=0.217333, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-06,0.0003,0.003 0.01,0.03,0.19,0.92,1.4 1.8,2.0,2.3,3.1), mean=0.489, stddev=0.603], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-05,0.002,0.02 0.05,0.10,0.34,0.78,0.96 1.0,1.0,1.0,1.0), mean=0.429, stddev=0.328], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-10,3e-06,3e-05,0.0002 0.0006,0.001,0.006,0.02,0.02 0.03,0.04,0.04,0.05), mean=0.00922, stddev=0.00995], oderiv-count=95984
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000106554, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.03193, linear-params-row-norms=[ 0.60 0.55 0.34 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-10,8e-06,6e-05,0.0004 0.002,0.005,0.02,0.07,0.09 0.11,0.13,0.15,0.19), mean=0.0393, stddev=0.0389], bias-{mean,stddev}=8.071e-08,0.01788, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=96880
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/16.raw exp/dihard3_sad_tdnn_stats/17.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.530586 tdnn2.affine:1.31456 tdnn3.affine:0.664711 tdnn4.affine:0.689586 tdnn5.affine:0.767467 output.affine:0.0441049 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.5984 tdnn2.affine:27.9413 tdnn3.affine:22.666 tdnn4.affine:24.2081 tdnn5.affine:21.7991 output.affine:0.885337 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0235247 tdnn2.affine:0.0477136 tdnn3.affine:0.0294162 tdnn4.affine:0.0285528 tdnn5.affine:0.0352811 output.affine:0.0503982 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Oct 13 17:30:09 EDT 2020, elapsed time 1 seconds
