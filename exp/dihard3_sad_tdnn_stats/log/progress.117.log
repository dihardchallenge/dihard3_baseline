# nnet3-info exp/dihard3_sad_tdnn_stats/117.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/116.raw exp/dihard3_sad_tdnn_stats/117.raw 
# Started at Tue Oct 13 17:42:08 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/117.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000573257, max-change=0.75, linear-params-rms=0.1212, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.96,0.99,1.1,2.1,2.3 2.5,3.2,4.2,5.0), mean=1.56, stddev=0.706], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.5,1.5,1.6 1.7,1.7,1.9,2.1,2.2 2.3,2.4,2.6,3.7), mean=1.92, stddev=0.255], bias-{mean,stddev}=-0.04895,0.6176, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.88e+06, self-repaired-proportion=0.577923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.005,0.30,0.74 1.0,1.5,1.6,2.0), mean=0.191, stddev=0.367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.14,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.435, stddev=0.441], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.006 0.006,0.007,0.01,0.08,0.10 0.11,0.12,0.15,0.19), mean=0.0429, stddev=0.0417], oderiv-count=1.5696e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000573257, max-change=0.75, linear-params-rms=0.08328, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.0 1.1,1.1,1.5,3.8,4.5 5.1,5.6,6.1,6.9), mean=2.24, stddev=1.45], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.47 0.48,0.49,0.55,1.8,2.1 2.3,2.5,2.7,3.0), mean=1.13, stddev=0.708], bias-{mean,stddev}=-0.01727,0.9789, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5e+05, self-repaired-proportion=0.00441672, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.02 0.03,0.05,0.17,1.1,2.1 2.9,3.9,4.6,18), mean=0.728, stddev=1.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.12 0.14,0.20,0.35,0.61,0.75 0.86,0.91,0.92,1.0), mean=0.401, stddev=0.231], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.002,0.002,0.002,0.007,0.01 0.01,0.02,0.02,0.02), mean=0.00429, stddev=0.00408], oderiv-count=485222
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000573257, max-change=0.75, linear-params-rms=0.04873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.0 1.1,1.1,1.5,1.8,2.0 2.2,2.4,2.6,2.8), mean=1.51, stddev=0.38], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.47,0.48 0.49,0.50,0.54,0.94,1.2 1.4,1.7,1.8,2.0), mean=0.706, stddev=0.327], bias-{mean,stddev}=0.03636,0.9173, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.10,0.12 0.17,0.27,0.84,1.6,2.3 2.7,3.2,3.5,4.4), mean=1.05, stddev=0.854], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.18,0.20 0.24,0.27,0.41,0.61,0.71 0.76,0.81,0.82,0.89), mean=0.437, stddev=0.175], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.004,0.005,0.006 0.006,0.008,0.009,0.01), mean=0.00384, stddev=0.00183], oderiv-count=524851
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000573257, max-change=0.75, linear-params-rms=0.04362, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.5,1.7,2.0 2.2,2.3,2.7,3.0), mean=1.52, stddev=0.351], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.48,0.64,0.83,0.91 1.0,1.2,1.2,1.8), mean=0.669, stddev=0.192], bias-{mean,stddev}=-0.0469,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.07,0.10 0.16,0.23,0.53,1.1,1.5 1.7,2.2,2.5,4.6), mean=0.7, stddev=0.59], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.14 0.18,0.23,0.37,0.52,0.59 0.66,0.73,0.76,0.89), mean=0.38, stddev=0.158], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.005,0.007,0.009,0.01 0.01,0.01,0.01,0.02), mean=0.00724, stddev=0.00246], oderiv-count=351360
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000573257, max-change=0.75, linear-params-rms=0.0423, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.95,0.96,0.98 0.99,1.0,1.3,1.9,2.1 2.3,2.4,2.7,3.0), mean=1.44, stddev=0.46], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.46 0.48,0.51,0.64,0.78,0.85 0.91,1.0,1.1,1.5), mean=0.66, stddev=0.151], bias-{mean,stddev}=-0.07573,0.8832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.67e+04, self-repaired-proportion=0.014222, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.02 0.04,0.09,0.36,1.1,1.4 1.6,1.9,2.5,3.6), mean=0.594, stddev=0.598], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.08,0.16,0.34,0.66,0.75 0.81,0.88,0.91,0.96), mean=0.394, stddev=0.247], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0002,0.0005,0.0009 0.002,0.005,0.01,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0126, stddev=0.00822], oderiv-count=99366.4
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=5.73257e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.06932, linear-params-row-norms=[ 1.4 1.3 0.49 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.006,0.01 0.02,0.05,0.10,0.15,0.18 0.21,0.24,0.26,0.31), mean=0.103, stddev=0.0619], bias-{mean,stddev}=-9.476e-07,0.04179, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=94528
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/116.raw exp/dihard3_sad_tdnn_stats/117.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.419128 tdnn2.affine:0.606474 tdnn3.affine:0.406712 tdnn4.affine:0.587686 tdnn5.affine:0.744494 output.affine:0.0380289 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:29.1085 tdnn2.affine:45.3374 tdnn3.affine:28.8976 tdnn4.affine:30.208 tdnn5.affine:28.0688 output.affine:1.92232 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0144201 tdnn2.affine:0.0133943 tdnn3.affine:0.0140897 tdnn4.affine:0.019478 tdnn5.affine:0.0265626 output.affine:0.0198687 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:42:08 EDT 2020, elapsed time 0 seconds
