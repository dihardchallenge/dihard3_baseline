# nnet3-info exp/dihard3_sad_tdnn_stats/46.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/45.raw exp/dihard3_sad_tdnn_stats/46.raw 
# Started at Tue Oct 13 17:33:30 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/46.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000859053, max-change=0.75, linear-params-rms=0.09265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.5,1.6 1.8,1.9,2.9,3.5), mean=1.25, stddev=0.377], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.3,1.3,1.4,1.6,1.7 1.8,1.8,2.0,3.0), mean=1.47, stddev=0.196], bias-{mean,stddev}=-0.072,0.8045, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.47e+06, self-repaired-proportion=0.7883, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.55,1.0 1.3,1.8,1.9,2.4), mean=0.269, stddev=0.47], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.444, stddev=0.47], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.006,0.006,0.009,0.07,0.09 0.10,0.11,0.13,0.15), mean=0.037, stddev=0.036], oderiv-count=1.60274e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000859053, max-change=0.75, linear-params-rms=0.06364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.99,1.0 1.0,1.0,1.2,2.8,3.4 3.8,4.3,4.4,5.9), mean=1.76, stddev=1.03], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,1.4,1.6 1.7,1.9,2.1,2.3), mean=0.897, stddev=0.477], bias-{mean,stddev}=-0.0173,0.9792, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.43e+05, self-repaired-proportion=0.01483, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.007 0.009,0.01,0.09,0.88,1.7 2.3,2.8,3.6,19), mean=0.544, stddev=1.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.09 0.12,0.14,0.29,0.68,0.84 0.90,0.93,0.94,1.0), mean=0.387, stddev=0.269], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.002,0.002,0.008,0.01 0.02,0.02,0.02,0.03), mean=0.00493, stddev=0.00522], oderiv-count=484992
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000859053, max-change=0.75, linear-params-rms=0.03952, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.97,0.98,0.99 1.0,1.0,1.2,1.4,1.5 1.7,1.9,2.0,2.4), mean=1.24, stddev=0.242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.47 0.48,0.49,0.51,0.70,0.87 1.0,1.3,1.3,1.5), mean=0.6, stddev=0.196], bias-{mean,stddev}=0.03633,0.9184, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.09e+05, self-repaired-proportion=0.000508811, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.07,0.10,0.56,1.3,1.9 2.3,2.6,2.9,4.4), mean=0.782, stddev=0.769], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.11,0.12 0.17,0.22,0.42,0.69,0.80 0.86,0.90,0.91,0.92), mean=0.447, stddev=0.23], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.007,0.008,0.009,0.02), mean=0.00382, stddev=0.00211], oderiv-count=513792
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000859053, max-change=0.75, linear-params-rms=0.03465, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,1.0,1.0 1.0,1.0,1.2,1.3,1.5 1.7,1.8,2.0,2.3), mean=1.22, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.51,0.62,0.69 0.74,0.82,0.90,1.2), mean=0.542, stddev=0.113], bias-{mean,stddev}=-0.04715,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.37e+05, self-repaired-proportion=0.00107705, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.06 0.07,0.11,0.42,1.1,1.4 1.7,2.0,2.4,3.6), mean=0.614, stddev=0.578], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.09,0.12 0.14,0.21,0.37,0.56,0.65 0.73,0.80,0.85,0.93), mean=0.389, stddev=0.192], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.02), mean=0.00591, stddev=0.00282], oderiv-count=344800
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000859053, max-change=0.75, linear-params-rms=0.0329, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.95,0.96 0.98,0.99,1.0,1.4,1.5 1.6,1.7,1.9,2.2), mean=1.15, stddev=0.235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.50,0.58,0.62 0.67,0.75,0.78,1.2), mean=0.52, stddev=0.0822], bias-{mean,stddev}=-0.07558,0.8832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.11e+04, self-repaired-proportion=0.0873299, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.005,0.01,0.02 0.02,0.04,0.27,1.1,1.6 2.0,2.5,2.6,3.3), mean=0.605, stddev=0.692], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.02,0.05,0.06 0.06,0.12,0.36,0.75,0.91 0.95,1.0,1.0,1.0), mean=0.431, stddev=0.304], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,0.0002,0.0003,0.0004 0.0008,0.002,0.006,0.01,0.02 0.02,0.03,0.03,0.04), mean=0.00864, stddev=0.00796], oderiv-count=106400
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=8.59053e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.04268, linear-params-row-norms=[ 0.82 0.75 0.41 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,0.0005,0.001,0.002 0.006,0.01,0.04,0.10,0.12 0.15,0.17,0.19,0.25), mean=0.0562, stddev=0.048], bias-{mean,stddev}=-1.028e-07,0.02452, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.90 0 ], oderiv-count=101696
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/45.raw exp/dihard3_sad_tdnn_stats/46.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.583917 tdnn2.affine:1.08452 tdnn3.affine:0.603708 tdnn4.affine:0.724795 tdnn5.affine:0.916777 output.affine:0.0487649 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.5803 tdnn2.affine:36.0839 tdnn3.affine:24.9652 tdnn4.affine:26.14 tdnn5.affine:23.583 output.affine:1.18347 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0238177 tdnn2.affine:0.0302419 tdnn3.affine:0.024249 tdnn4.affine:0.027799 tdnn5.affine:0.03898 output.affine:0.0415519 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Oct 13 17:33:31 EDT 2020, elapsed time 1 seconds
