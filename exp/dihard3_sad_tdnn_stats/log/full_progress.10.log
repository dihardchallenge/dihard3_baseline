# nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/9.raw exp/dihard3_sad_tdnn_stats/10.raw 
# Started at Tue Oct 13 17:29:20 EDT 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/dihard3_sad_tdnn_stats/9.raw exp/dihard3_sad_tdnn_stats/10.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
VLOG[1] (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00113077, max-change=0.75, linear-params-rms=0.002187, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0001,0.0001 0.0001,0.0001,0.002,0.04,0.05 0.06,0.06,0.07,0.13), mean=0.0203, stddev=0.0234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04,0.04 0.05,0.06,0.07,0.09), mean=0.0337, stddev=0.00923], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,4e-08,6e-08 9e-08,2e-07,0.004,0.02,0.04 0.07,0.12,0.16,0.24), mean=0.0147, stddev=0.0317], bias-{mean,stddev}=-3.305e-06,0.004728, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00113077, max-change=0.75, linear-params-rms=0.003094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.05,0.14,0.17 0.19,0.23,0.28,0.31), mean=0.0764, stddev=0.0629], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.07,0.08 0.09,0.11,0.12,0.15), mean=0.0329, stddev=0.0369], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.004,0.007,0.02,0.06,0.10 0.15,0.24,0.42,0.84), mean=0.0474, stddev=0.0869], bias-{mean,stddev}=8.006e-06,0.0002299, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.04,0.06 0.07,0.09,0.12,0.15), mean=0.0286, stddev=0.023], oderiv-count=28224
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00113077, max-change=0.75, linear-params-rms=0.001546, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.02,0.02,0.04,0.06,0.07 0.08,0.09,0.10,0.11), mean=0.0442, stddev=0.0221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.002 0.003,0.005,0.01,0.03,0.05 0.05,0.06,0.07,0.10), mean=0.0175, stddev=0.0174], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.004,0.01,0.04,0.07 0.10,0.16,0.20,0.30), mean=0.0269, stddev=0.0415], bias-{mean,stddev}=1.576e-06,0.0003847, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.02e+04, self-repaired-proportion=0.292734, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-11,-7.0,-5.2 -3.4,-1.7,0.02,1.5,3.6 5.0,7.5,8.4,11), mean=-0.0183, stddev=3.15], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-13,-8.0,-6.0 -3.7,-1.9,0.57,2.3,3.3 4.1,5.1,6.2,14), mean=0.0849, stddev=3.22], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.004,0.005 0.006,0.007,0.009,0.01,0.02 0.02,0.03,0.03,0.04), mean=0.0109, stddev=0.00564], oderiv-count=33408
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00113077, max-change=0.75, linear-params-rms=0.001234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.02,0.04,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.0397, stddev=0.0193], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.004,0.005,0.01,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0163, stddev=0.0111], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.005,0.006,0.01,0.04,0.07 0.10,0.13,0.16,0.21), mean=0.0276, stddev=0.0345], bias-{mean,stddev}=-1.296e-05,0.0002729, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.6e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.7,-8.6,-7.7,-5.1 -3.2,-2.2,-0.24,0.80,1.9 3.6,4.6,5.7,11), mean=-0.535, stddev=2.58], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.9,-4.6,-4.0,-3.1 -2.5,-1.5,0.22,1.4,2.1 2.7,3.7,5.4,7.0), mean=0.0424, stddev=1.92], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.006 0.007,0.008,0.01,0.01,0.02 0.02,0.02,0.04,0.06), mean=0.0115, stddev=0.00613], oderiv-count=58800
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00113077, max-change=0.75, linear-params-rms=0.001213, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.003,0.005,0.02,0.06,0.08 0.09,0.10,0.12,0.13), mean=0.0312, stddev=0.0302], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.002,0.002 0.003,0.005,0.02,0.03,0.03 0.03,0.04,0.04,0.06), mean=0.0162, stddev=0.0107], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-07,3e-05,0.0004 0.001,0.002,0.008,0.04,0.07 0.10,0.14,0.16,0.20), mean=0.0241, stddev=0.0361], bias-{mean,stddev}=2.87e-05,0.0001715, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=0.000113077, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.001734, linear-params-row-norms=[ 0.03 0.03 0.006 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-15,2e-09,2e-05,5e-05 0.0002,0.0004,0.001,0.004,0.005 0.006,0.008,0.008,0.01), mean=0.00212, stddev=0.00213], linear-params-singular-values=[ 0.05 0.007 1e-07 ], bias-{mean,stddev}=1.521e-08,0.0003705, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.45 0.89 0 ], oderiv-count=11200

LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.499558 tdnn2.affine:1.58097 tdnn3.affine:0.789887 tdnn4.affine:0.705101 tdnn5.affine:0.694437 output.affine:0.0480669 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:22.341 tdnn2.affine:25.1457 tdnn3.affine:22.1619 tdnn4.affine:23.8104 tdnn5.affine:21.5251 output.affine:0.778253 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0223852 tdnn2.affine:0.0639162 tdnn3.affine:0.0357655 tdnn4.affine:0.0296854 tdnn5.affine:0.0323131 output.affine:0.0641216 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:29:20 EDT 2020, elapsed time 0 seconds
