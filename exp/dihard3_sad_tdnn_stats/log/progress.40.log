# nnet3-info exp/dihard3_sad_tdnn_stats/40.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/39.raw exp/dihard3_sad_tdnn_stats/40.raw 
# Started at Tue Oct 13 17:32:48 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/40.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000898204, max-change=0.75, linear-params-rms=0.0893, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.4,1.6 1.7,1.8,2.5,3.3), mean=1.22, stddev=0.332], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.6 1.7,1.8,1.9,2.9), mean=1.41, stddev=0.18], bias-{mean,stddev}=-0.0743,0.8266, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.6e+06, self-repaired-proportion=0.81797, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.57,1.1 1.3,1.9,1.9,2.4), mean=0.279, stddev=0.482], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.08,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.446, stddev=0.475], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.006,0.007,0.01,0.07,0.09 0.10,0.11,0.13,0.15), mean=0.0376, stddev=0.0363], oderiv-count=1.67424e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000898204, max-change=0.75, linear-params-rms=0.06061, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.99,0.99 1.0,1.0,1.1,2.6,3.3 3.6,4.0,4.2,5.6), mean=1.69, stddev=0.954], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,1.3,1.5 1.6,1.8,2.0,2.2), mean=0.862, stddev=0.44], bias-{mean,stddev}=-0.01729,0.9792, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.31e+05, self-repaired-proportion=0.0292065, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.008,0.01,0.06,0.87,1.7 2.4,2.8,3.4,19), mean=0.525, stddev=1.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.09 0.10,0.14,0.28,0.72,0.86 0.92,0.94,0.94,1.0), mean=0.386, stddev=0.278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.008,0.01 0.02,0.02,0.03,0.03), mean=0.00527, stddev=0.00559], oderiv-count=544320
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000898204, max-change=0.75, linear-params-rms=0.03842, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.97,0.98,0.99 1.0,1.0,1.2,1.3,1.5 1.7,1.8,1.9,2.3), mean=1.21, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.47 0.48,0.49,0.51,0.67,0.83 0.99,1.2,1.3,1.5), mean=0.587, stddev=0.178], bias-{mean,stddev}=0.03627,0.9186, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.11e+05, self-repaired-proportion=0.000268601, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.06,0.09,0.48,1.3,1.9 2.2,2.5,3.0,4.2), mean=0.736, stddev=0.747], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.17,0.21,0.42,0.71,0.82 0.88,0.91,0.92,0.93), mean=0.452, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.006,0.007 0.007,0.009,0.01,0.02), mean=0.00407, stddev=0.00226], oderiv-count=497088
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000898204, max-change=0.75, linear-params-rms=0.0337, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,0.99,1.0 1.0,1.0,1.1,1.3,1.4 1.6,1.7,1.9,2.2), mean=1.19, stddev=0.199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.45,0.50,0.60,0.66 0.71,0.79,0.87,1.1), mean=0.528, stddev=0.102], bias-{mean,stddev}=-0.04719,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.8e+05, self-repaired-proportion=0.00111712, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.06,0.10,0.41,1.0,1.4 1.6,2.1,2.3,3.5), mean=0.588, stddev=0.567], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.11 0.13,0.20,0.36,0.57,0.69 0.74,0.83,0.87,0.93), mean=0.388, stddev=0.199], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.02), mean=0.00602, stddev=0.00293], oderiv-count=352400
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000898204, max-change=0.75, linear-params-rms=0.03199, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.95,0.96 0.97,0.98,1.0,1.3,1.4 1.5,1.6,1.8,2.1), mean=1.13, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.49,0.55,0.60 0.64,0.71,0.74,1.1), mean=0.507, stddev=0.0733], bias-{mean,stddev}=-0.07559,0.8832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=7.36e+04, self-repaired-proportion=0.109677, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.01,0.01 0.02,0.04,0.24,1.1,1.6 1.9,2.4,2.7,3.4), mean=0.589, stddev=0.681], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.04,0.06 0.07,0.12,0.35,0.75,0.92 0.96,1.0,1.0,1.0), mean=0.431, stddev=0.308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,4e-05,0.0003,0.0004 0.0009,0.002,0.006,0.01,0.02 0.03,0.03,0.03,0.04), mean=0.00861, stddev=0.0082], oderiv-count=105616
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=8.98204e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.04045, linear-params-row-norms=[ 0.77 0.71 0.39 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,9e-05,0.001,0.002 0.004,0.01,0.04,0.09,0.12 0.14,0.16,0.18,0.24), mean=0.0526, stddev=0.0463], bias-{mean,stddev}=-6.799e-08,0.02331, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=97664
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/39.raw exp/dihard3_sad_tdnn_stats/40.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.585551 tdnn2.affine:1.10476 tdnn3.affine:0.613153 tdnn4.affine:0.743861 tdnn5.affine:0.914337 output.affine:0.0541528 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.1312 tdnn2.affine:34.6952 tdnn3.affine:24.5134 tdnn4.affine:25.731 tdnn5.affine:23.1663 output.affine:1.12159 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0243438 tdnn2.affine:0.0321099 tdnn3.affine:0.0250952 tdnn4.affine:0.0289917 tdnn5.affine:0.0395828 output.affine:0.0488144 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Oct 13 17:32:49 EDT 2020, elapsed time 1 seconds
