# nnet3-info exp/dihard3_sad_tdnn_stats/43.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/42.raw exp/dihard3_sad_tdnn_stats/43.raw 
# Started at Tue Oct 13 17:33:10 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/43.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.00087841, max-change=0.75, linear-params-rms=0.09108, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.5,1.6 1.7,1.9,2.7,3.4), mean=1.24, stddev=0.356], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.3,1.4,1.5,1.6 1.7,1.8,1.9,2.9), mean=1.44, stddev=0.189], bias-{mean,stddev}=-0.07302,0.8158, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.95e+06, self-repaired-proportion=0.803873, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.56,1.0 1.3,1.9,1.9,2.4), mean=0.274, stddev=0.476], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.08,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.445, stddev=0.473], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.006,0.006,0.01,0.07,0.09 0.10,0.11,0.13,0.15), mean=0.037, stddev=0.0359], oderiv-count=1.63238e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00087841, max-change=0.75, linear-params-rms=0.06215, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,0.99,1.0 1.0,1.0,1.1,2.7,3.4 3.7,4.2,4.3,5.7), mean=1.72, stddev=0.993], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,1.3,1.6 1.7,1.9,2.0,2.2), mean=0.88, stddev=0.459], bias-{mean,stddev}=-0.01729,0.9792, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.34e+05, self-repaired-proportion=0.020426, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.007 0.009,0.01,0.07,0.77,1.7 2.5,2.9,3.3,19), mean=0.529, stddev=1.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.10 0.11,0.16,0.28,0.69,0.85 0.92,0.93,0.94,1.0), mean=0.383, stddev=0.27], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.002,0.008,0.01 0.02,0.02,0.03,0.03), mean=0.00511, stddev=0.00544], oderiv-count=520704
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.00087841, max-change=0.75, linear-params-rms=0.03898, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.97,0.98,0.99 1.0,1.0,1.2,1.4,1.5 1.7,1.8,2.0,2.3), mean=1.23, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.47 0.48,0.49,0.51,0.69,0.85 1.0,1.2,1.3,1.5), mean=0.594, stddev=0.187], bias-{mean,stddev}=0.03631,0.9185, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.18e+05, self-repaired-proportion=0.00150465, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.06,0.10,0.51,1.3,1.9 2.3,2.5,2.9,4.2), mean=0.758, stddev=0.762], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.11,0.12 0.15,0.22,0.41,0.70,0.80 0.87,0.90,0.92,0.93), mean=0.448, stddev=0.237], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.007,0.009,0.01,0.02), mean=0.00396, stddev=0.00219], oderiv-count=551808
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.00087841, max-change=0.75, linear-params-rms=0.03418, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,0.99,1.0 1.0,1.0,1.2,1.3,1.5 1.6,1.7,2.0,2.2), mean=1.21, stddev=0.209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.51,0.61,0.68 0.73,0.80,0.88,1.2), mean=0.535, stddev=0.107], bias-{mean,stddev}=-0.04717,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.26e+05, self-repaired-proportion=0.00190649, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.07,0.10,0.40,1.1,1.4 1.7,2.0,2.3,3.5), mean=0.604, stddev=0.577], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.09,0.11 0.14,0.20,0.36,0.57,0.67 0.75,0.82,0.86,0.93), mean=0.388, stddev=0.197], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.02), mean=0.00591, stddev=0.00281], oderiv-count=335200
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.00087841, max-change=0.75, linear-params-rms=0.03246, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.95,0.96 0.97,0.98,1.0,1.3,1.5 1.6,1.7,1.8,2.1), mean=1.14, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.49,0.56,0.61 0.66,0.72,0.76,1.2), mean=0.513, stddev=0.0783], bias-{mean,stddev}=-0.0756,0.8832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.99e+04, self-repaired-proportion=0.0975379, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.002,0.01,0.01 0.02,0.04,0.24,1.1,1.6 2.0,2.4,2.7,3.4), mean=0.599, stddev=0.688], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.009,0.05,0.06 0.07,0.11,0.35,0.75,0.92 0.95,1.0,1.0,1.0), mean=0.433, stddev=0.307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,5e-05,0.0003,0.0004 0.0008,0.002,0.006,0.01,0.02 0.03,0.03,0.03,0.04), mean=0.00872, stddev=0.00815], oderiv-count=96768
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=8.7841e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.04143, linear-params-row-norms=[ 0.79 0.73 0.40 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,0.0002,0.001,0.002 0.005,0.01,0.04,0.09,0.12 0.14,0.17,0.18,0.25), mean=0.0543, stddev=0.0469], bias-{mean,stddev}=-6.83e-08,0.02391, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=105728
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/42.raw exp/dihard3_sad_tdnn_stats/43.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.594343 tdnn2.affine:1.09496 tdnn3.affine:0.625727 tdnn4.affine:0.729223 tdnn5.affine:0.927808 output.affine:0.0575247 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:24.3746 tdnn2.affine:35.4022 tdnn3.affine:24.7427 tdnn4.affine:25.9373 tdnn5.affine:23.3817 output.affine:1.14885 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0244684 tdnn2.affine:0.031162 tdnn3.affine:0.0253702 tdnn4.affine:0.0281903 tdnn5.affine:0.0397942 output.affine:0.0502066 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:33:10 EDT 2020, elapsed time 0 seconds
