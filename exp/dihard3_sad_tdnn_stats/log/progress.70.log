# nnet3-info exp/dihard3_sad_tdnn_stats/70.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/69.raw exp/dihard3_sad_tdnn_stats/70.raw 
# Started at Tue Oct 13 17:36:20 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/70.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000886881, max-change=0.75, linear-params-rms=0.1044, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.8,1.9 2.1,2.4,3.6,4.3), mean=1.38, stddev=0.521], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.6,1.8,1.9 2.0,2.1,2.3,3.4), mean=1.65, stddev=0.233], bias-{mean,stddev}=-0.06301,0.729, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.79e+06, self-repaired-proportion=0.708439, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.003,0.45,0.90 1.2,1.7,1.8,2.3), mean=0.236, stddev=0.429], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.12,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.439, stddev=0.459], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.006,0.009,0.07,0.09 0.10,0.11,0.13,0.16), mean=0.0377, stddev=0.037], oderiv-count=1.52774e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000886881, max-change=0.75, linear-params-rms=0.07292, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.99,1.0,1.0 1.0,1.1,1.3,3.2,3.9 4.4,4.8,5.4,6.5), mean=1.98, stddev=1.24], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.47 0.48,0.49,0.53,1.6,1.8 2.0,2.2,2.4,2.6), mean=1, stddev=0.588], bias-{mean,stddev}=-0.01724,0.9791, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.39e+05, self-repaired-proportion=0.00959752, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.01 0.01,0.02,0.11,1.1,1.9 2.8,3.4,3.9,19), mean=0.638, stddev=1.48], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.10 0.12,0.16,0.30,0.65,0.82 0.90,0.91,0.94,1.0), mean=0.389, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.007,0.01 0.01,0.02,0.02,0.03), mean=0.00432, stddev=0.00449], oderiv-count=516557
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000886881, max-change=0.75, linear-params-rms=0.04349, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.98,1.0,1.0 1.0,1.1,1.3,1.6,1.8 1.9,2.2,2.2,2.6), mean=1.36, stddev=0.311], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.47 0.48,0.49,0.52,0.81,1.0 1.3,1.5,1.5,1.8), mean=0.645, stddev=0.258], bias-{mean,stddev}=0.03642,0.9179, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.07 0.10,0.16,0.70,1.5,2.2 2.6,3.0,3.4,4.3), mean=0.922, stddev=0.838], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.16 0.20,0.25,0.41,0.65,0.77 0.82,0.86,0.88,0.92), mean=0.445, stddev=0.208], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.006,0.007,0.009,0.02), mean=0.00358, stddev=0.0019], oderiv-count=493517
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000886881, max-change=0.75, linear-params-rms=0.03826, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,0.99,1.0,1.0 1.0,1.1,1.3,1.5,1.7 1.9,2.0,2.3,2.6), mean=1.34, stddev=0.283], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.45,0.46,0.56,0.71,0.79 0.85,0.96,1.0,1.5), mean=0.593, stddev=0.149], bias-{mean,stddev}=-0.04699,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.27e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.07 0.11,0.17,0.47,1.1,1.5 1.8,2.0,2.5,4.3), mean=0.669, stddev=0.596], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.10,0.13 0.16,0.22,0.37,0.53,0.62 0.69,0.78,0.79,0.92), mean=0.387, stddev=0.175], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.004,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.02), mean=0.00592, stddev=0.00255], oderiv-count=349120
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000886881, max-change=0.75, linear-params-rms=0.03652, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.95,0.96,0.97 0.98,1.0,1.1,1.6,1.8 1.9,2.0,2.2,2.6), mean=1.26, stddev=0.337], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.47,0.55,0.66,0.72 0.78,0.85,0.91,1.3), mean=0.573, stddev=0.114], bias-{mean,stddev}=-0.0756,0.8832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=5.88e+04, self-repaired-proportion=0.048479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.02,0.02 0.02,0.07,0.32,1.2,1.6 2.0,2.2,2.8,3.6), mean=0.638, stddev=0.698], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.05,0.05,0.06 0.07,0.14,0.36,0.73,0.86 0.92,0.97,0.98,0.99), mean=0.422, stddev=0.286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.0002,0.0002,0.0004 0.001,0.002,0.008,0.01,0.02 0.02,0.03,0.03,0.04), mean=0.00933, stddev=0.00753], oderiv-count=99456
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=8.86881e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.05072, linear-params-row-norms=[ 0.98 0.91 0.44 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.001,0.002,0.005 0.01,0.02,0.06,0.12,0.14 0.18,0.19,0.22,0.27), mean=0.0702, stddev=0.0528], bias-{mean,stddev}=-4.504e-07,0.02927, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=97216
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/69.raw exp/dihard3_sad_tdnn_stats/70.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.545805 tdnn2.affine:0.893775 tdnn3.affine:0.524351 tdnn4.affine:0.679134 tdnn5.affine:0.870155 output.affine:0.051126 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:26.3189 tdnn2.affine:40.411 tdnn3.affine:26.63 tdnn4.affine:27.7368 tdnn5.affine:25.2668 output.affine:1.4064 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0208008 tdnn2.affine:0.0222054 tdnn3.affine:0.0197387 tdnn4.affine:0.024544 tdnn5.affine:0.0345356 output.affine:0.0366284 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Oct 13 17:36:21 EDT 2020, elapsed time 1 seconds
