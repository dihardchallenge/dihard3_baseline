# nnet3-info exp/dihard3_sad_tdnn_stats/52.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/51.raw exp/dihard3_sad_tdnn_stats/52.raw 
# Started at Tue Oct 13 17:34:12 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/52.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000821609, max-change=0.75, linear-params-rms=0.09582, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.95,0.98,1.1,1.6,1.7 1.9,2.0,3.2,3.8), mean=1.29, stddev=0.418], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.4,1.5,1.6,1.7 1.8,1.9,2.1,3.1), mean=1.52, stddev=0.209], bias-{mean,stddev}=-0.06968,0.7842, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.62e+06, self-repaired-proportion=0.754943, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.52,1.0 1.3,1.8,1.8,2.4), mean=0.26, stddev=0.459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.10,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.443, stddev=0.467], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.006,0.01,0.07,0.09 0.10,0.11,0.13,0.15), mean=0.0372, stddev=0.0363], oderiv-count=1.58878e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000821609, max-change=0.75, linear-params-rms=0.06629, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.98,1.0,1.0 1.0,1.0,1.2,2.9,3.6 4.0,4.5,4.7,6.1), mean=1.82, stddev=1.09], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.48,0.49,0.53,1.4,1.7 1.8,2.0,2.2,2.4), mean=0.928, stddev=0.509], bias-{mean,stddev}=-0.0173,0.9791, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.56e+05, self-repaired-proportion=0.0134764, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.005,0.007 0.009,0.02,0.08,0.91,1.8 2.5,2.9,3.3,19), mean=0.567, stddev=1.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.08 0.10,0.14,0.27,0.67,0.82 0.90,0.93,0.94,1.0), mean=0.379, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.002,0.002,0.008,0.01 0.01,0.02,0.02,0.03), mean=0.00462, stddev=0.00489], oderiv-count=517248
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000821609, max-change=0.75, linear-params-rms=0.04059, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.97,0.99,1.0 1.0,1.0,1.2,1.4,1.6 1.8,2.0,2.1,2.4), mean=1.27, stddev=0.261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.47 0.48,0.49,0.51,0.73,0.91 1.1,1.3,1.4,1.6), mean=0.612, stddev=0.214], bias-{mean,stddev}=0.03637,0.9183, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.36e+05, self-repaired-proportion=0.000346021, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.07,0.12,0.57,1.4,2.1 2.5,2.6,3.1,4.4), mean=0.826, stddev=0.803], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.13 0.18,0.23,0.41,0.69,0.80 0.86,0.90,0.91,0.92), mean=0.449, stddev=0.227], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.005,0.006 0.007,0.008,0.009,0.02), mean=0.00371, stddev=0.00203], oderiv-count=480384
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000821609, max-change=0.75, linear-params-rms=0.0356, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,0.98,1.0,1.0 1.0,1.1,1.2,1.4,1.5 1.7,1.8,2.1,2.4), mean=1.25, stddev=0.237], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.52,0.65,0.72 0.77,0.85,0.96,1.3), mean=0.555, stddev=0.123], bias-{mean,stddev}=-0.04709,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=2.82e+05, self-repaired-proportion=0.00112457, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.05 0.08,0.13,0.43,1.1,1.4 1.7,1.9,2.4,3.8), mean=0.623, stddev=0.58], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.10,0.12 0.14,0.22,0.36,0.55,0.65 0.73,0.81,0.83,0.93), mean=0.387, stddev=0.188], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.003,0.004,0.005,0.007,0.009 0.01,0.01,0.01,0.02), mean=0.00584, stddev=0.0027], oderiv-count=354800
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000821609, max-change=0.75, linear-params-rms=0.03386, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.95,0.95,0.96 0.98,0.99,1.1,1.4,1.6 1.7,1.8,2.0,2.3), mean=1.18, stddev=0.264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.42,0.43 0.44,0.46,0.51,0.60,0.65 0.71,0.78,0.82,1.2), mean=0.534, stddev=0.0914], bias-{mean,stddev}=-0.07561,0.8832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.44e+04, self-repaired-proportion=0.0763507, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.008,0.01,0.02 0.02,0.05,0.28,1.2,1.7 2.0,2.5,2.7,3.3), mean=0.62, stddev=0.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.03,0.05,0.06 0.07,0.12,0.37,0.75,0.90 0.93,0.99,1.0,1.0), mean=0.43, stddev=0.299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0001,0.0002,0.0003 0.0008,0.002,0.007,0.02,0.02 0.02,0.03,0.03,0.04), mean=0.00888, stddev=0.0079], oderiv-count=109200
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=8.21609e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.04481, linear-params-row-norms=[ 0.86 0.80 0.42 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0005,0.0006,0.003 0.007,0.01,0.05,0.10,0.13 0.16,0.18,0.19,0.25), mean=0.0599, stddev=0.0494], bias-{mean,stddev}=-2.12e-07,0.02559, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=97328
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/51.raw exp/dihard3_sad_tdnn_stats/52.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.572018 tdnn2.affine:1.01379 tdnn3.affine:0.576829 tdnn4.affine:0.726602 tdnn5.affine:0.927789 output.affine:0.0527464 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:25.0268 tdnn2.affine:37.3113 tdnn3.affine:25.4066 tdnn4.affine:26.5519 tdnn5.affine:24.0215 output.affine:1.2427 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0229176 tdnn2.affine:0.0272859 tdnn3.affine:0.0227663 tdnn4.affine:0.0274333 tdnn5.affine:0.038731 output.affine:0.0428215 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:34:12 EDT 2020, elapsed time 0 seconds
