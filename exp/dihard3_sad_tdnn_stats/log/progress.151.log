# nnet3-info exp/dihard3_sad_tdnn_stats/151.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/150.raw exp/dihard3_sad_tdnn_stats/151.raw 
# Started at Tue Oct 13 17:46:19 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/151.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000418073, max-change=0.75, linear-params-rms=0.1281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.96,0.99,1.1,2.3,2.5 2.8,3.4,4.3,5.2), mean=1.64, stddev=0.778], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.6,1.7,1.7 1.8,1.8,2.0,2.2,2.3 2.4,2.5,2.7,3.8), mean=2.03, stddev=0.257], bias-{mean,stddev}=-0.04225,0.5686, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.69e+06, self-repaired-proportion=0.543023, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.006,0.22,0.67 0.95,1.4,1.5,1.9), mean=0.172, stddev=0.34], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.18,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.433, stddev=0.433], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.006,0.007 0.007,0.008,0.02,0.09,0.11 0.13,0.14,0.17,0.22), mean=0.0495, stddev=0.0478], oderiv-count=1.54728e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000418073, max-change=0.75, linear-params-rms=0.08677, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.6,4.0,4.7 5.3,5.8,6.3,7.0), mean=2.33, stddev=1.51], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.47 0.48,0.49,0.56,1.9,2.2 2.3,2.6,2.8,3.2), mean=1.17, stddev=0.746], bias-{mean,stddev}=-0.01733,0.9788, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=6.27e+05, self-repaired-proportion=0.0050008, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.02 0.04,0.06,0.20,1.0,2.2 3.0,4.0,4.7,17), mean=0.744, stddev=1.48], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.12 0.14,0.20,0.35,0.59,0.75 0.85,0.90,0.93,1.0), mean=0.403, stddev=0.223], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.003,0.008,0.01 0.01,0.02,0.02,0.03), mean=0.00486, stddev=0.00439], oderiv-count=479693
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000418073, max-change=0.75, linear-params-rms=0.05083, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.2,1.6,1.9,2.1 2.3,2.5,2.7,2.9), mean=1.58, stddev=0.398], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.48 0.49,0.50,0.55,1.0,1.3 1.5,1.7,1.8,2.1), mean=0.732, stddev=0.35], bias-{mean,stddev}=0.0363,0.9172, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.11,0.15 0.20,0.30,0.87,1.7,2.3 2.7,3.1,3.6,4.8), mean=1.07, stddev=0.848], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.18,0.21 0.24,0.28,0.40,0.59,0.68 0.74,0.79,0.80,0.89), mean=0.434, stddev=0.167], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.003,0.004,0.006,0.007 0.007,0.008,0.01,0.02), mean=0.00454, stddev=0.00198], oderiv-count=547891
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000418073, max-change=0.75, linear-params-rms=0.04592, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.3,1.5,1.9,2.1 2.3,2.4,2.9,3.1), mean=1.6, stddev=0.367], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.46 0.47,0.50,0.68,0.89,0.96 1.1,1.2,1.3,1.8), mean=0.704, stddev=0.206], bias-{mean,stddev}=-0.04683,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.27e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.09,0.10 0.17,0.25,0.51,1.1,1.4 1.6,2.2,2.5,4.5), mean=0.686, stddev=0.563], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.14 0.18,0.23,0.37,0.50,0.59 0.66,0.72,0.75,0.87), mean=0.374, stddev=0.154], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.006 0.006,0.007,0.009,0.01,0.01 0.01,0.02,0.02,0.02), mean=0.00924, stddev=0.00265], oderiv-count=382080
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000418073, max-change=0.75, linear-params-rms=0.04483, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,0.95,0.97,0.98 1.0,1.1,1.4,2.0,2.3 2.4,2.6,2.8,3.2), mean=1.53, stddev=0.498], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.46,0.48 0.50,0.54,0.69,0.83,0.90 0.96,1.1,1.1,1.6), mean=0.699, stddev=0.161], bias-{mean,stddev}=-0.07604,0.8831, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.59e+04, self-repaired-proportion=0.0046627, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.04,0.10,0.34,0.92,1.2 1.4,1.9,2.3,3.2), mean=0.533, stddev=0.514], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.09,0.17,0.34,0.60,0.68 0.76,0.85,0.87,0.94), mean=0.376, stddev=0.224], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0004,0.0006,0.001 0.003,0.007,0.02,0.02,0.03 0.03,0.04,0.04,0.05), mean=0.0159, stddev=0.00947], oderiv-count=98918.4
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=4.18073e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.08357, linear-params-row-norms=[ 1.6 1.5 0.51 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.008,0.01 0.03,0.07,0.12,0.19,0.21 0.25,0.27,0.29,0.35), mean=0.127, stddev=0.07], bias-{mean,stddev}=-1.163e-06,0.05169, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=101606
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/150.raw exp/dihard3_sad_tdnn_stats/151.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.351496 tdnn2.affine:0.469283 tdnn3.affine:0.315569 tdnn4.affine:0.491091 tdnn5.affine:0.619574 output.affine:0.0252599 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:30.3194 tdnn2.affine:47.0148 tdnn3.affine:29.8231 tdnn4.affine:31.3026 tdnn5.affine:29.328 output.affine:2.3177 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0116039 tdnn2.affine:0.00999015 tdnn3.affine:0.0105915 tdnn4.affine:0.0157027 tdnn5.affine:0.0211489 output.affine:0.0109491 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Tue Oct 13 17:46:19 EDT 2020, elapsed time 0 seconds
