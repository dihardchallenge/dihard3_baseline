# nnet3-info exp/dihard3_sad_tdnn_stats/104.raw && nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/103.raw exp/dihard3_sad_tdnn_stats/104.raw 
# Started at Tue Oct 13 17:40:32 EDT 2020
#
nnet3-info exp/dihard3_sad_tdnn_stats/104.raw 
left-context: 24
right-context: 46
num-parameters: 1229878
modulus: 18
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2)) input-dim=200 output-dim=200
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=200 output-dim=255
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=255 output-dim=255
component-node name=tdnn1.renorm component=tdnn1.renorm input=tdnn1.relu input-dim=255 output-dim=256
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.renorm, -1), tdnn1.renorm, Offset(tdnn1.renorm, 1), Offset(tdnn1.renorm, 2)) input-dim=1024 output-dim=255
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=255 output-dim=255
component-node name=tdnn2.renorm component=tdnn2.renorm input=tdnn2.relu input-dim=255 output-dim=256
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(tdnn2.renorm, -3), tdnn2.renorm, Offset(tdnn2.renorm, 3), Offset(tdnn2.renorm, 6)) input-dim=1024 output-dim=255
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=255 output-dim=255
component-node name=tdnn3.renorm component=tdnn3.renorm input=tdnn3.relu input-dim=255 output-dim=256
component-node name=tdnn3_stats-extraction-99-99 component=tdnn3_stats-extraction-99-99 input=tdnn3.renorm input-dim=256 output-dim=257
component-node name=tdnn3_stats-pooling-99-99 component=tdnn3_stats-pooling-99-99 input=tdnn3_stats-extraction-99-99 input-dim=257 output-dim=257
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.renorm, -6), tdnn3.renorm, Offset(tdnn3.renorm, 6), Offset(tdnn3.renorm, 12), Round(tdnn3_stats-pooling-99-99, 9)) input-dim=1281 output-dim=255
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=255 output-dim=255
component-node name=tdnn4.renorm component=tdnn4.renorm input=tdnn4.relu input-dim=255 output-dim=256
component-node name=tdnn4_stats-extraction-108-108 component=tdnn4_stats-extraction-108-108 input=tdnn4.renorm input-dim=256 output-dim=257
component-node name=tdnn4_stats-pooling-108-108 component=tdnn4_stats-pooling-108-108 input=tdnn4_stats-extraction-108-108 input-dim=257 output-dim=257
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(tdnn4.renorm, -12), tdnn4.renorm, Offset(tdnn4.renorm, 12), Offset(tdnn4.renorm, 24), Round(tdnn4_stats-pooling-108-108, 18)) input-dim=1281 output-dim=256
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=256 output-dim=256
component-node name=tdnn5.renorm component=tdnn5.renorm input=tdnn5.relu input-dim=256 output-dim=256
component-node name=output.affine component=output.affine input=tdnn5.renorm input-dim=256 output-dim=3
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=3 output-dim=3
output-node name=output input=output.log-softmax dim=3 objective=linear
component name=lda type=FixedAffineComponent, input-dim=200, output-dim=200, linear-params-rms=0.0017, bias-{mean,stddev}=0.01236,0.1777
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=200, output-dim=255, learning-rate=0.000646798, max-change=0.75, linear-params-rms=0.1176, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.85,0.89,0.91,0.92 0.96,0.99,1.1,2.0,2.2 2.4,3.0,4.0,4.9), mean=1.52, stddev=0.667], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.5,1.5 1.6,1.7,1.8,2.0,2.2 2.3,2.3,2.5,3.7), mean=1.86, stddev=0.253], bias-{mean,stddev}=-0.05236,0.6408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=1.75e+06, self-repaired-proportion=0.61215, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.004,0.33,0.77 1.0,1.5,1.6,2.1), mean=0.2, stddev=0.381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.13,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.435, stddev=0.446], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.005,0.005 0.006,0.006,0.01,0.08,0.09 0.11,0.12,0.15,0.18), mean=0.0414, stddev=0.0403], oderiv-count=1.63936e+06
component name=tdnn1.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000646798, max-change=0.75, linear-params-rms=0.08128, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.0 1.1,1.1,1.5,3.7,4.4 4.9,5.4,6.0,6.9), mean=2.18, stddev=1.41], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.47 0.48,0.49,0.55,1.8,2.0 2.2,2.5,2.6,2.9), mean=1.1, stddev=0.685], bias-{mean,stddev}=-0.01724,0.9789, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.62e+05, self-repaired-proportion=0.00432585, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.04,0.16,1.1,2.0 3.0,3.8,4.5,18), mean=0.719, stddev=1.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.11 0.14,0.19,0.32,0.63,0.77 0.85,0.91,0.93,1.0), mean=0.402, stddev=0.236], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.001 0.001,0.002,0.002,0.007,0.01 0.01,0.02,0.02,0.02), mean=0.00424, stddev=0.00412], oderiv-count=537754
component name=tdnn2.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=1024, output-dim=255, learning-rate=0.000646798, max-change=0.75, linear-params-rms=0.04764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.0,1.0 1.1,1.1,1.5,1.8,1.9 2.2,2.4,2.5,2.8), mean=1.48, stddev=0.368], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.47,0.48 0.48,0.49,0.53,0.91,1.2 1.4,1.6,1.7,2.0), mean=0.693, stddev=0.314], bias-{mean,stddev}=0.03639,0.9174, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=5.57e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.08,0.11 0.15,0.23,0.83,1.7,2.3 2.6,3.2,3.6,4.3), mean=1.02, stddev=0.852], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.16,0.18 0.23,0.26,0.42,0.62,0.71 0.78,0.81,0.84,0.90), mean=0.438, stddev=0.182], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.002,0.002,0.004,0.005,0.006 0.006,0.008,0.009,0.01), mean=0.00375, stddev=0.00183], oderiv-count=523008
component name=tdnn3.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn3_stats-extraction-99-99 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn3_stats-pooling-99-99 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=255, learning-rate=0.000646798, max-change=0.75, linear-params-rms=0.04243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.2,1.4,1.7,1.9 2.1,2.2,2.6,2.9), mean=1.48, stddev=0.339], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.45 0.46,0.48,0.62,0.80,0.89 0.98,1.1,1.2,1.7), mean=0.652, stddev=0.184], bias-{mean,stddev}=-0.04691,1.067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=255, self-repair-scale=1e-05, count=3.59e+05, self-repaired-proportion=3.87315e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.07,0.09 0.15,0.22,0.52,1.1,1.4 1.8,2.1,2.6,4.5), mean=0.701, stddev=0.595], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.13 0.18,0.23,0.38,0.52,0.60 0.66,0.73,0.77,0.89), mean=0.383, stddev=0.161], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.004 0.004,0.005,0.006,0.008,0.01 0.01,0.01,0.01,0.02), mean=0.00679, stddev=0.00246], oderiv-count=367040
component name=tdnn4.renorm type=NormalizeComponent, input-dim=255, output-dim=256, target-rms=1, add-log-stddev=true
component name=tdnn4_stats-extraction-108-108 type=StatisticsExtractionComponent, input-dim=256, output-dim=257
component name=tdnn4_stats-pooling-108-108 type=StatisticsPoolingComponent, input-dim=257, output-dim=257
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=1281, output-dim=256, learning-rate=0.000646798, max-change=0.75, linear-params-rms=0.04099, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,0.96,0.96,0.98 0.99,1.0,1.2,1.8,2.1 2.2,2.4,2.6,2.9), mean=1.4, stddev=0.436], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.46 0.47,0.50,0.62,0.75,0.83 0.89,0.98,1.0,1.5), mean=0.64, stddev=0.145], bias-{mean,stddev}=-0.07566,0.8832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=256, self-repair-scale=1e-05, count=6.78e+04, self-repaired-proportion=0.0183383, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.02 0.03,0.08,0.36,1.1,1.5 1.7,2.1,2.7,3.7), mean=0.618, stddev=0.638], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.06 0.07,0.16,0.34,0.67,0.78 0.84,0.90,0.93,0.98), mean=0.404, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0002,0.0004,0.0009 0.001,0.004,0.01,0.02,0.02 0.03,0.03,0.03,0.04), mean=0.0116, stddev=0.00793], oderiv-count=98291.2
component name=tdnn5.renorm type=NormalizeComponent, input-dim=256, output-dim=256, target-rms=1, add-log-stddev=false
component name=output.affine type=NaturalGradientAffineComponent, input-dim=256, output-dim=3, learning-rate=6.46798e-05, learning-rate-factor=0.1, max-change=1.5, linear-params-rms=0.06406, linear-params-row-norms=[ 1.2 1.2 0.48 ], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.004,0.005,0.007 0.02,0.04,0.09,0.14,0.17 0.21,0.23,0.25,0.30), mean=0.0938, stddev=0.0593], bias-{mean,stddev}=-8.076e-07,0.0381, rank-in=20, rank-out=2, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=3, oderiv-rms=[ 0.44 0.89 0 ], oderiv-count=99635.2
nnet3-show-progress --use-gpu=no exp/dihard3_sad_tdnn_stats/103.raw exp/dihard3_sad_tdnn_stats/104.raw 
LOG (nnet3-show-progress[5.5.810~1-76a979]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:0.475927 tdnn2.affine:0.68656 tdnn3.affine:0.437189 tdnn4.affine:0.61135 tdnn5.affine:0.783324 output.affine:0.0403126 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:28.4699 tdnn2.affine:44.3785 tdnn3.affine:28.4164 tdnn4.affine:29.6495 tdnn5.affine:27.426 output.affine:1.77662 ]
LOG (nnet3-show-progress[5.5.810~1-76a979]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.0167395 tdnn2.affine:0.0154903 tdnn3.affine:0.015407 tdnn4.affine:0.0206527 tdnn5.affine:0.028613 output.affine:0.0228296 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Tue Oct 13 17:40:33 EDT 2020, elapsed time 1 seconds
